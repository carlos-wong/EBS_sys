*** TODO TODOlist[77%]
**** TODO 不能自动识别inand和tf的原因
     因为第一阶段的代码大小有限制如果把这个代码添加进去就会超过大小限制。
     可以修改原来的代码不使用两个函数使用一个函数，并且再去掉一下不必要的代码应该能达到
**** TODO 客户需要增加两个关于升级的UI图片
     SCHEDULED: <2012-02-20 Mon>
**** TODO 增加一个在后台不断运行的程序，只用来触发按键来进行软件测试
**** TODO 让客户重新定义版本号
**** TODO 发布的软件串口功能关闭
     应该是直接关闭内核的串口驱动
**** TODO 关于应用程序加密[0%]
     将应用程序解密到内存中通过运行内容里面的软件来执行这样就不会出现
     通过文件系统破解的方法。
     原理就是需要使用内存申请和映射的方法来使用内存而不是简单的文件拷
     贝。这样使用普通的方法就无法得到解密之后的文件。
***** TODO 新的应用程序需要新的内核来配合
     在处理校验的时候应用程序也需要知道内核是否是配对的内核
     并且在新的内核发布的时候去掉串口输出。
     这样就无法使用其他的内核破解应用，使用当前的内核又不能进行交互。
**** WAITING 制作外置卡内容制作脚本
     CLOCK: [2013-02-26 Tue 10:37]--[2013-02-26 Tue 10:37] =>  0:00
     :PROPERTIES:
     :Effort:   90
     :END:
**** WAITING 解决使用48K声音播放会让声音过高并且声音过尖的问题。                :@work:
     CLOCK: [2013-01-29 Tue 15:26]--[2013-01-29 Tue 17:21] =>  1:55
     CLOCK: [2013-01-29 Tue 15:12]--[2013-01-29 Tue 15:26] =>  0:14
     CLOCK: [2013-01-29 Tue 14:55]--[2013-01-29 Tue 15:12] =>  0:17
     CLOCK: [2013-01-29 Tue 14:25]--[2013-01-29 Tue 14:55] =>  0:30
     CLOCK: [2013-01-29 Tue 11:52]--[2013-01-29 Tue 11:58] =>  0:06
     CLOCK: [2013-01-29 Tue 11:24]--[2013-01-29 Tue 11:52] =>  0:28
     CLOCK: [2013-01-29 Tue 11:16]--[2013-01-29 Tue 11:18] =>  0:02
     CLOCK: [2013-01-29 Tue 11:14]--[2013-01-29 Tue 11:15] =>  0:01
     CLOCK: [2013-01-28 Mon 17:25]--[2013-01-28 Mon 17:25] =>  0:00
     CLOCK: [2013-01-28 Mon 15:28]--[2013-01-28 Mon 17:25] =>  1:57
     CLOCK: [2013-01-28 Mon 15:27]--[2013-01-28 Mon 15:28] =>  0:01
     CLOCK: [2013-01-28 Mon 15:11]--[2013-01-28 Mon 15:12] =>  0:01
     CLOCK: [2013-01-28 Mon 11:48]--[2013-01-28 Mon 12:26] =>  0:38
     CLOCK: [2013-01-28 Mon 10:39]--[2013-01-28 Mon 11:48] =>  1:09
     CLOCK: [2013-01-18 Fri 11:48]--[2013-01-18 Fri 11:50] =>  0:02
     CLOCK: [2013-01-07 Mon 11:54]--[2013-01-07 Mon 12:33] =>  0:39
     CLOCK: [2013-01-07 Mon 11:34]--[2013-01-07 Mon 11:46] =>  0:12
     CLOCK: [2013-01-07 Mon 11:27]--[2013-01-07 Mon 11:34] =>  0:07
     CLOCK: [2013-01-07 Mon 10:39]--[2013-01-07 Mon 10:49] =>  0:10
     :PROPERTIES:
     :Effort:   24:00
     :END:
***** note
过查看代码一直到模拟ym2610的代码中。模拟器启动的时候设置的采样率参数是会影响ym2610的声音输出数据。如果想改善这个功能那么要么再继续深入ym2610的模拟器代码。查看声音产生的逻辑。势必要更了解这个IC需要花更多的时间。
有一直方法就是在写入声音的时候将产生的44100的声音数据重新采样成需要频率的声音数据。这个做法会影响模拟器的运行效率。
没有必要比较44100 48000两种模式输出的声音数据查看差别？
  
用的是ym2610声音播放IC，yamaha2610
z0是什么作用：z80是一个处理芯片，主要功能应该是用来和成声音并传输给
y2610进行播放.
  
新寻找了一个库？还是使用原来C++的代码？可以使用重新寻找的库，因为是
典的代码。如果使用了速度变慢那么还可以优化一下。
  
是尝试使用原来的代码。多做一次内存拷贝。如果不能使用的话。
***** libresample
      经过测试发现zitaresample的数据转换会影响其他内存。使用
      libresample来进行声音转换
      
***** zita resample
      不能正确转换16bit双声道数据从44100到48000
***** DONE 查找声音重采样的资料
      CLOSED: [2013-01-28 Mon 10:39]
      - CLOSING NOTE [2013-01-28 Mon 10:39]
****** DONE 阅读代码查看产生的数据和声音采样率之间的关系
      CLOCK: [2013-01-07 Mon 16:35]--[2013-01-07 Mon 16:35] =>  0:00
      CLOCK: [2013-01-07 Mon 15:09]--[2013-01-07 Mon 15:15] =>  0:06
要详细了解模拟ym2610的代码实现。另外的方式就是将输出的数据进行重采样再填充
  
****** DONE 搜索声音重采样相关的代码
 用 zita-resample作为重采样的实现代码
  
******* 查看代码实现方法
       CLOCK: [2013-01-09 Wed 16:48]--[2013-01-09 Wed 16:54] =>  0:06
       CLOCK: [2013-01-09 Wed 14:11]--[2013-01-09 Wed 16:48] =>  2:37
始化及实现。原来的应用是用来实现文件转换的。目前的功能不需要文件转换。只需要将 buffer经过一定的计算转化成需要的声音数据即可
何验证实现的方法是否正常工作？
为网络上的方法是C++的实现需要重新实现为C
******* DONE 重新实现代码为C并进行测试
  
       CLOCK: [2013-01-10 Thu 18:15]--[2013-01-10 Thu 18:30] =>  0:15
       CLOCK: [2013-01-10 Thu 17:12]--[2013-01-10 Thu 17:45] =>  0:33
       CLOCK: [2013-01-10 Thu 17:01]--[2013-01-10 Thu 17:12] =>  0:11
       CLOCK: [2013-01-10 Thu 16:34]--[2013-01-10 Thu 16:46] =>  0:12
dther是用于声音扩展和图像缩放的有效算法。任何内容最终都可以被理解成波。
24位声音转换成16位声音的时候不是简单的丢弃最后的4位数据，而是往4位数据中添加造成让最后的16位数据产生变化，使得能在16位声音时得到更多的声音效果。
  
******* DONE 再次查找github看是否有需要先成C实现的代码
       CLOCK: [2013-01-09 Wed 16:58]--[2013-01-09 Wed 18:10] =>  1:12
  
****** DONE 将得到的代码添加到模拟器中对模拟器输出的声音进行重采样
       CLOSED: [2013-01-28 Mon 10:39]
       - CLOSING NOTE [2013-01-28 Mon 10:39]
      CLOCK: [2013-01-12 Sat 16:20]--[2013-01-12 Sat 18:00] =>  1:40
      CLOCK: [2013-01-12 Sat 12:16]--[2013-01-12 Sat 12:24] =>  0:08
      CLOCK: [2013-01-11 Fri 18:23]--[2013-01-11 Fri 18:43] =>  0:20
      CLOCK: [2013-01-11 Fri 12:42]--[2013-01-11 Fri 13:38] =>  0:56
      CLOCK: [2013-01-11 Fri 11:29]--[2013-01-11 Fri 12:21] =>  0:52
      CLOCK: [2013-01-11 Fri 10:35]--[2013-01-11 Fri 11:29] =>  0:54
像文件转换一样，模拟器里面的声音转换是永远不会停的。所以不用考虑文件结尾的问题
于频率的变换，只有设置内核的时候声音的采样率设置为48000，模拟器中依然使用44100的数据产生，那么就是设定的时候给一个固定的值。
次转换出来的值就必须写到播放设备中去，那么就不能有像文件读写的缓冲操作一样等到产生足够的数据来再来写入到文件中去。
果是转换的话那么如果转换之后的采样率比转换之前高，转换出来的数据应该要比转换之前的数据多。
换输出来的声音不正确。可能是格式不正常。模拟器中使用的是16位的数据，但是转换器中使用的是32位的数据
  
***** DONE 上sourfrage看有没有合适的audio resample代码
      CLOSED: [2013-01-28 Mon 15:39]
**** DONE 修改运行外置卡游戏的方式为拷贝到机器内部储存空间运行。解决外置卡接触不良的问题。
     CLOSED: [2013-02-21 Thu 12:16]
**** DONE 增加功能判断外置卡内容的合法性
     CLOSED: [2013-02-21 Thu 12:16]
     可以判断msc_spl的数据。指定一个长度然后进行读取。应该指定第二阶
     段之前的一小段数据。这段数据是没有用的。可以不用更改。并且如果编
     译出来和时间有关的话也可以手动写个代码修改这段数据的内容。
**** DONE 外置游戏卡升级内容确认
     CLOSED: [2013-02-21 Thu 12:16]
**** DONE 制作一个外置卡升级的镜像文件
     CLOSED: [2013-02-21 Thu 11:35] SCHEDULED: <2013-02-19 Tue>
     CLOCK: [2013-02-20 Wed 12:36]--[2013-02-20 Wed 12:37] =>  0:01
     CLOCK: [2013-02-19 Tue 16:00]--[2013-02-19 Tue 18:23] =>  2:23
     CLOCK: [2013-02-19 Tue 14:58]--[2013-02-19 Tue 15:07] =>  0:09
     :PROPERTIES:
     :Effort:   90
     :END:
     partition:
     1.uboot
     2.recovery kernel
     3.game_res
     4.game save
     5.update partitoin
***** DONE uboot 修改分区大小
      CLOSED: [2013-02-19 Tue 18:23]
     1.
     2.
     3.700MB
     4.100MB
     5.sys update file
**** DONE fba的测试版本模拟器是否有加密
     CLOSED: [2013-02-19 Tue 10:15]
**** DONE usb boot 加载外置卡的uboot 来启动
     CLOCK: [2013-01-21 Mon 16:35]--[2013-01-21 Mon 17:40] =>  1:05
     CLOCK: [2013-01-21 Mon 15:17]--[2013-01-21 Mon 16:32] =>  1:15
     CLOCK: [2013-01-21 Mon 11:37]--[2013-01-21 Mon 12:33] =>  0:56
     CLOCK: [2013-01-21 Mon 11:09]--[2013-01-21 Mon 11:37] =>  0:28
     CLOCK: [2013-01-21 Mon 11:08]--[2013-01-21 Mon 11:09] =>  0:01
     CLOCK: [2013-01-19 Sat 17:10]--[2013-01-19 Sat 17:50] =>  0:40
     CLOCK: [2013-01-19 Sat 10:12]--[2013-01-19 Sat 10:48] =>  0:36
     CLOCK: [2013-01-19 Sat 10:12]--[2013-01-19 Sat 10:12] =>  0:00
     CLOCK: [2013-01-18 Fri 17:54]--[2013-01-18 Fri 18:14] =>  0:20
     CLOCK: [2013-01-18 Fri 17:43]--[2013-01-18 Fri 17:43] =>  0:00
     CLOCK: [2013-01-18 Fri 16:54]--[2013-01-18 Fri 17:43] =>  0:49
     CLOCK: [2013-01-18 Fri 16:25]--[2013-01-18 Fri 16:54] =>  0:29
     PE9 sd1_vcc_en_n
     修改代码增加msc1的寄存器设置，把所有对msc0的初始化抄到msc1中。
     把cpm的设置添加上就能够工作。
     Mon Jan 21 15:15:52 2013 (mcs1初始化的时候寄存器的状态会一直停留在reseting的状态。需要从内核中扒驱动的代码)
  
ms1初始化的时候寄存器的状态会一直停留在reseting的状态。需要从内核中扒驱动的代码
看看。msc1的初始化应该要比mcs0多一些。
  
/ome/carlos/workspace/snk_project/usb_boot_src/device/stage2/sdcard/jz4770_mmc.c
  
为时钟设置问题msc1在启动之后会一直处在复位的状态。
决问题的时候不要懊恼，不要总是为什么我没想到。要经常总结。总结出一套有效快速的
试流程和技巧。
  
  
Mn Jan 21 16:27:14 2013 (出现了读取外置卡超时的问题。要再仔细检查读取外置卡内容的接口是否正确工)
现了读取外置卡超时的问题。要再仔细检查读取外置卡内容的接口是否正确工
。拔掉外置卡看基本的初始化命令是否能工作。
  
过比较msc0和mcs1的命令来看基本的寄存器初始化是不是工作正常了
  
于msc1读取失败的问题。从寄存器对比开始查，最后发现是使用msc1读取sd卡
时候读取的长度传递错了。在写代码的时候一定要注意。不过这次可能是使用
eacs不熟练引起的。在emacs中目前还处在记命令的阶段。所以阅读代码没有之
使用vim那么有感觉。不过emacs是需要花耐心去使用的工具。会变成量身定制。
好。
  
**** DONE 修改fw.bin将内存初始化到256M RAM
     CLOCK: [2013-01-22 Tue 16:26]--[2013-01-22 Tue 16:53] =>  0:27
**** DONE 关于外置游戏卡存档处理问题
**** DONE 制作一个去掉dingux和ps有关的文件的镜像 版本号为370
     CLOCK: [2013-01-16 Wed 11:43]--[2013-01-16 Wed 13:02] =>  1:19
     CLOCK: [2013-01-15 Tue 12:21]--[2013-01-15 Tue 13:25] =>  1:04
     CLOCK: [2013-01-14 Mon 18:03]--[2013-01-14 Mon 18:31] =>  0:28
     CLOCK: [2013-01-14 Mon 17:24]--[2013-01-14 Mon 17:27] =>  0:03
     CLOCK: [2013-01-14 Mon 14:42]--[2013-01-14 Mon 16:47] =>  2:05
务器上的软件有重大更新之后出现未解决完的问题。使用会snk_4770的分支。
***** DONE 去掉双系统启动脚本
      CLOCK: [2013-01-14 Mon 17:27]--[2013-01-14 Mon 17:32] =>  0:05
  
***** DONE 去掉文件系统制作自动制作游戏相关空目录
      CLOCK: [2013-01-14 Mon 17:35]--[2013-01-14 Mon 17:39] =>  0:04
  
***** DONE 去掉配置文件系统产生的和游戏配置文件有关的目录
***** DONE 删除掉一些无用的链接
      CLOCK: [2013-01-14 Mon 17:40]--[2013-01-14 Mon 17:47] =>  0:07
***** DONE 修改自动制作的脚本在产生version.text的时候只包含总版本信息
      CLOCK: [2013-01-14 Mon 17:48]--[2013-01-14 Mon 17:54] =>  0:06
  
***** DONE 去掉inittab的注释
      CLOCK: [2013-01-14 Mon 17:57]--[2013-01-14 Mon 18:01] =>  0:04
  
**** DONE 发布软件给客户之前检查校验加密用的函数名，并修改位置，不要在函数开头明显的位置调用
     CLOSED: [2013-01-31 Thu 18:04]
**** DONE 在 usbboot 中添加屏幕驱动
     CLOSED: [2013-01-28 Mon 10:30]
     - CLOSING NOTE [2013-01-28 Mon 10:30] \\
       暂时解决屏幕需要重新启动两次才能正常工作的方法就是在初始化屏幕之后往
       framebuffer中写入数据。然后再重新初始化一次.刚才重新看了一遍代
       码。只是在初始化之后立刻往framebuffer中赋值即可。
     - CLOSING NOTE [2013-01-28 Mon 10:20]
     CLOCK: [2013-01-26 Sat 17:23]--[2013-01-26 Sat 17:23] =>  0:00
     CLOCK: [2013-01-26 Sat 15:38]--[2013-01-26 Sat 17:23] =>  1:45
     CLOCK: [2013-01-26 Sat 15:07]--[2013-01-26 Sat 15:07] =>  0:00
     CLOCK: [2013-01-26 Sat 10:59]--[2013-01-26 Sat 12:04] =>  1:05
     CLOCK: [2013-01-26 Sat 10:56]--[2013-01-26 Sat 10:59] =>  0:03
     CLOCK: [2013-01-26 Sat 10:26]--[2013-01-26 Sat 10:56] =>  0:30
     CLOCK: [2013-01-25 Fri 16:52]--[2013-01-25 Fri 16:52] =>  0:00
     CLOCK: [2013-01-25 Fri 16:15]--[2013-01-25 Fri 16:52] =>  0:37
     CLOCK: [2013-01-25 Fri 15:25]--[2013-01-25 Fri 16:15] =>  0:50
     - CLOSING NOTE [2013-01-24 Thu 17:00] \\
       还少拷贝了一段使能LCD的代码，将该代码添加到初始化中并给framebuffer填充
       数据之后屏幕能够正常现实
     CLOCK: [2013-01-24 Thu 15:44]--[2013-01-24 Thu 16:13] =>  0:29
     CLOCK: [2013-01-24 Thu 13:34]--[2013-01-24 Thu 13:44] =>  0:10
     CLOCK: [2013-01-24 Thu 12:45]--[2013-01-24 Thu 13:29] =>  0:44
     CLOCK: [2013-01-23 Wed 18:05]--[2013-01-23 Wed 18:48] =>  0:43
     CLOCK: [2013-01-23 Wed 17:27]--[2013-01-23 Wed 18:05] =>  0:38
     CLOCK: [2013-01-23 Wed 17:20]--[2013-01-23 Wed 17:27] =>  0:07
     CLOCK: [2013-01-23 Wed 16:20]--[2013-01-23 Wed 17:17] =>  0:57
     CLOCK: [2013-01-23 Wed 15:59]--[2013-01-23 Wed 16:20] =>  0:21
     CLOCK: [2013-01-23 Wed 15:16]--[2013-01-23 Wed 15:59] =>  0:43
     CLOCK: [2013-01-23 Wed 14:31]--[2013-01-23 Wed 15:16] =>  0:45
     在添加lcd结构体数据的时候出现编译错误
     /opt/mipseltools-gcc412-glibc261/lib/gcc/mipsel-linux/4.1.2/../../../../mipsel-linux/bin/ld:
     error: no memory region specified for loadable section
     `.rel.dyn'
     修改代码发现不要在定义的时候就直接赋值，在初始化lcd的时候赋值不
     会出现该提示。
  
     内部时钟可能没有初始化好
  
     屏幕在第一次断电上电的时候显示不正常。需要通过打印寄存器来查看为
     何效果会不同。
  
     需要在给framebuffer填充数据后检查寄存器设置是否正确，如果不正确则重新初始化。必须要等到填充完framebuffer(可以不显示),才能去判断并初始化？或者干脆每次都初始化两次。
  
**** DONE 在usb boot 中添加识别不到sd的提示
     CLOSED: [2013-01-25 Fri 13:01]
     - CLOSING NOTE [2013-01-25 Fri 13:01] \\
       need cpu speed to 1020Mhe otherwise the screen will some not show probely
     CLOCK: [2013-01-25 Fri 12:21]--[2013-01-25 Fri 13:00] =>  0:39
     CLOCK: [2013-01-25 Fri 12:14]--[2013-01-25 Fri 12:14] =>  0:00
     CLOCK: [2013-01-25 Fri 11:40]--[2013-01-25 Fri 12:14] =>  0:34
     CLOCK: [2013-01-25 Fri 11:27]--[2013-01-25 Fri 11:40] =>  0:13
     CLOCK: [2013-01-25 Fri 10:51]--[2013-01-25 Fri 11:27] =>  0:36
     CLOCK: [2013-01-25 Fri 10:51]--[2013-01-25 Fri 10:51] =>  0:00
     如何判断升级卡的合法性？升级卡的内容能够被读取那么就是合法的，需
     要计算升级文件的校验值。判断升级程序是否被修改过。
     如果用户插入一张普通的sd卡那么是不是也读取里面的内容并运行？这样
     危险，会造成执行危险指令删除机器内部的内容。但是也是可以被恢复的。
***** 转换图片资源文件
      CLOCK: [2013-01-25 Fri 10:51]--[2013-01-25 Fri 10:51] =>  0:00
**** DONE 处理客户手上的机器337不能使用recovery升级的问题
     CLOCK: [2013-01-12 Sat 12:12]--[2013-01-12 Sat 12:12] =>  0:00
     CLOCK: [2013-01-12 Sat 11:52]--[2013-01-12 Sat 12:12] =>  0:20
用337的烧录文件和网络上的335到370的升级文件都不能正常工作。可能是升级文件有问题。找王松
  
**** DONE 外置卡的uboot 启动外置卡的内核
     CLOCK: [2013-01-22 Tue 15:43]--[2013-01-22 Tue 16:18] =>  0:35
     CLOCK: [2013-01-22 Tue 15:17]--[2013-01-22 Tue 15:43] =>  0:26
     CLOCK: [2013-01-22 Tue 11:49]--[2013-01-22 Tue 12:06] =>  0:17
  
**** DONE 外置卡的内容需要重新整理，不能包含其他模拟器的信息。应该是一个干净的文件夹。在原来的分支上重新建立新的分支
     CLOSED: [2013-02-20 Wed 10:27]
**** DONE 实现主界面程序和模拟器程序解密                              :@work:
     CLOSED: [2013-01-31 Thu 18:03]
**** DONE 实现内核按键查询加密处理功能                                :@work:
     CLOSED: [2013-02-19 Tue 15:47] SCHEDULED: <2013-02-17 Sun>
     CLOCK: [2013-02-19 Tue 15:21]--[2013-02-19 Tue 15:47] =>  0:26
     CLOCK: [2013-02-19 Tue 14:58]--[2013-02-19 Tue 15:21] =>  0:23
     CLOCK: [2013-02-17 Sun 14:33]--[2013-02-17 Sun 17:07] =>  2:34
     CLOCK: [2013-02-17 Sun 12:12]--[2013-02-17 Sun 12:35] =>  0:23
     CLOCK: [2013-02-17 Sun 11:27]--[2013-02-17 Sun 12:12] =>  0:45
     :PROPERTIES:
     :Effort:   90
     :END:
     用于第三方软件读取按键信息的时候需要配套的加密key.暂时关闭内核功
     能给第三方软件使用。
  
**** DONE 实现外置游戏卡升级功能                                      :@work:
     CLOSED: [2013-02-20 Wed 10:27]
**** DONE 实现游戏卡带内容加密                                        :@work:
     CLOSED: [2013-01-31 Thu 18:04]
**** DONE 实现游戏存档功能                                            :@work:
     CLOSED: [2013-01-31 Thu 18:04]
**** DONE 提供36个游戏并带储存功能的机器给客户 原来的20个游戏以及后来的15个游戏 以及nija master<2013-01-15 Tue 11:00>
要将声音修改为44100采样率
  
**** DONE 整理AES审核版本[100%]
     使用48K的声音速度进行播放
***** DONE 主界面
      CLOSED: [2013-02-01 Fri 14:07]
      :LOGBOOK:
      CLOCK: [2013-01-31 Thu 09:56]--[2013-02-01 Fri 14:07] => 28:11
      CLOCK: [2013-01-31 Thu 09:53]--[2013-01-31 Thu 09:54] =>  0:01
      :END:
      :PROPERTIES:
      :Effort:   60
      :END:
***** DONE 模拟器
      CLOSED: [2013-01-31 Thu 11:31]
      :LOGBOOK:
      CLOCK: [2013-01-31 Thu 10:49]--[2013-01-31 Thu 11:31] =>  0:42
      :END:
      :PROPERTIES:
      :Effort:   120
      :END:
***** DONE 内核
      CLOSED: [2013-01-31 Thu 11:48]
      :LOGBOOK:
      CLOCK: [2013-01-31 Thu 11:31]--[2013-01-31 Thu 11:48] =>  0:17
      :END:
      :PROPERTIES:
      :Effort:   30
      :END:
****** TODO 修改声音采样率回48000 这个是暂时的修改
***** DONE 测试[100%]
****** DONE HDMI
       CLOSED: [2013-01-31 Thu 15:37]
****** DONE tvout
       CLOSED: [2013-01-31 Thu 15:37]
****** DONE 每个游戏运行
       CLOSED: [2013-01-31 Thu 16:36]
****** DONE 外置卡游戏运行
       CLOSED: [2013-01-31 Thu 17:05]
****** DONE 保存16：9 4：3的缩放比例操作
       CLOSED: [2013-01-31 Thu 13:32]
****** DONE 按键单次触发
       CLOSED: [2013-01-31 Thu 17:05]
**** DONE 整理代码将串口输出整理到一个单独的文件中
     CLOCK: [2013-01-22 Tue 11:34]--[2013-01-22 Tue 11:43] =>  0:09
     CLOCK: [2013-01-21 Mon 18:04]--[2013-01-21 Mon 18:14] =>  0:10
**** DONE 机器内部文件泄漏                                  :bigissue:@work:
     CLOCK: [2013-01-14 Mon 11:10]--[2013-01-14 Mon 11:13] =>  0:03
关dingux的文件，ps1的bios,final burn alpha的模拟器源代码。
时没什么好办法。
**** DONE 模拟器版权问题[100%]
***** DONE 将相关的内容发给黄先生
      CLOSED: [2013-02-19 Tue 14:56]
      CLOCK: [2013-02-19 Tue 14:08]--[2013-02-19 Tue 14:56] =>  0:48
      :PROPERTIES:
      :Effort:   45
      :END:
**** DONE 给客户发邮件处理讨论关于升级的问题
**** DONE 能让USB启动UBOOT软件的第二阶段
     CLOCK: [2013-01-18 Fri 16:20]--[2013-01-18 Fri 16:24] =>  0:04
     CLOCK: [2013-01-18 Fri 11:20]--[2013-01-18 Fri 11:48] =>  0:28
     CLOCK: [2013-01-18 Fri 11:00]--[2013-01-18 Fri 11:20] =>  0:20
     CLOCK: [2013-01-17 Thu 18:27]--[2013-01-17 Thu 18:47] =>  0:20
     CLOCK: [2013-01-17 Thu 14:34]--[2013-01-17 Thu 14:53] =>  0:19
     CLOCK: [2013-01-17 Thu 14:16]--[2013-01-17 Thu 14:34] =>  0:18
     CLOCK: [2013-01-17 Thu 10:54]--[2013-01-17 Thu 12:35] =>  1:41
     CLOCK: [2013-01-17 Thu 10:42]--[2013-01-17 Thu 10:54] =>  0:12
     CLOCK: [2013-01-16 Wed 15:30]--[2013-01-16 Wed 16:49] =>  1:19
     CLOCK: [2013-01-16 Wed 09:54]--[2013-01-16 Wed 10:36] =>  0:42
     CLOCK: [2013-01-16 Wed 09:51]--[2013-01-16 Wed 09:53] =>  0:02
改usb_boot.bin用来引导外部的uboot代码。是引导第一阶段还是直接引导第二阶段。应该引导第一阶段会比较好。
导第一阶段的做法就是拷贝前面8K的内容，然后清除cache,接着就是直接跳转到固定的地址来运行。
果引导第一阶段那么会覆盖fw.bin的内容。应该用来引导第二阶段。引导第二阶段的代码可以使用spl的代码来实现。
不到第二阶段的代码。不需要第二阶段的代码。只要把u-boot的第一阶段的代码移植过来即可。
  
不是改uboot的第一阶段的代码到能代替usboot的代码来得更快一些。代码的结构都不用修改。基本上就是修改编译和在开头的时候添加got的功能？
  
u-boot的第一阶段代码移到usbboot的第二阶段中。能加载内部的sd卡的uboot第二阶段启动。主要代码就是拷贝mmc的驱动以及加载的数据相关参数.
现就是uboot中的代码是可以判断出机器使用的是inand还是sd来进行对应的初始化。
  
***** DONE 直接替换uboot的第二阶段到usb_boot.bin上看能否直接运行
      CLOCK: [2013-01-14 Mon 12:32]--[2013-01-14 Mon 12:43] =>  0:11
      CLOCK: [2013-01-14 Mon 11:22]--[2013-01-14 Mon 11:33] =>  0:11
      CLOCK: [2013-01-14 Mon 10:41]--[2013-01-14 Mon 11:02] =>  0:21
载君正的软件看第二阶段的编译地址。
  
***** DONE 查看是否可以从外置卡启动
      CLOCK: [2013-01-14 Mon 12:43]--[2013-01-14 Mon 13:02] =>  0:19
能从外置卡启动
  
***** DONE 修改uboot第二阶段的编译地址到能替换usb-boot.bin来运行
      CLOCK: [2013-01-14 Mon 16:48]--[2013-01-14 Mon 17:03] =>  0:15
  
***** DONE 如何自动识别sd和mmc
      CLOCK: [2013-01-17 Thu 18:10]--[2013-01-17 Thu 18:25] =>  0:15
初始化完sd卡后通过发送55命令和41命令可以根据得到的返回值来判断是tf还是mmc,未做过详细测试，在出货的机器上如果要使用该代码则必须在使用的元器件上测试是否满足该条件。
**** DONE 记得提醒王送把校验cpuid的加密库上传到服务器上
     CLOSED: [2013-02-19 Tue 10:15] SCHEDULED: <2013-02-19 Tue>
